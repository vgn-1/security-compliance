AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation template to create custom AWS Config rules. You will be
  billed for the AWS resources used if you create a stack from this template.
Parameters:
  RuleName:
    Description: Name of the Rule
    Default: 'sg-chosen-ports-closure'
    Type: String
    MinLength: '1'
    MaxLength: '128'
  RemediationMode:
    Description: Choose what the remediation mode should be. Choose 'True' if you want auto-remediation to be turned on. i.e. non-compliance triggers the remediation action automatically. 
    Default: False
    Type: String
    AllowedValues: [True, False]
  Description:
    Description: Description of the Rule
    Default: 'sg-chosen-ports-closure'
    Type: String
    MinLength: '1'
    MaxLength: '255'
  RuleLambdaName:
    Description: Name of the Rule's Lambda function
    Default: 'sg-chosen-ports-closure'
    Type: String
    MinLength: '1'
    MaxLength: '64'
  LambdaRoleArn:
    Description: >-
      ARN of the existing IAM role that you want to attach to the lambda
      function.
    Type: String
    Default: ''
  BoundaryPolicyArn:
    Description: 'ARN of a Boundary Policy, will be used only if LambdaRoleArn is NOT set.'
    Type: String
    Default: ''
  SourceEvents:
    Description: Event Type
    Type: CommaDelimitedList
    Default: AWS::EC2::SecurityGroup
  SourceRuntime:
    Description: Runtime Language
    Default: 'python3.7'
    Type: String
    MinLength: '1'
    MaxLength: '255'
  SourcePeriodic:
    Description: Execution Frequency
    Type: String
    MinLength: '1'
    MaxLength: '255'
    Default: NONE
  SourceInputParameters:
    Description: Input Parameters
    Type: String
    Default: '{"FocusOnPorts": "22,80,3389"}'  
  Layers:
    Description: >-
      Comma-separated list of Lambda layers to be included with Lambda Function
      deployment
    Type: String
    Default: ''
  SecurityGroupIds:
    Description: Comma-separated list of Security Group Ids for Lambda Function deployment
    Type: String
    Default: ''
  SubnetIds:
    Description: Comma-separated list of Subnet Ids for Lambda Function deployment
    Type: String
    Default: ''
  Timeout:
    Description: Lambda Function timeout
    Type: String
    Default: 60
Conditions:
  CreateNewLambdaRole: !Equals 
    - !Ref LambdaRoleArn
    - ''
  UseBoundaryPolicyInRole: !Not 
    - !Equals 
      - !Ref BoundaryPolicyArn
      - ''
  EventTriggered: !Not 
    - !Equals 
      - !Join 
        - ','
        - !Ref SourceEvents
      - NONE
  PeriodicTriggered: !Not 
    - !Equals 
      - !Ref SourcePeriodic
      - NONE
  UseAdditionalLayers: !Not 
    - !Equals 
      - !Ref Layers
      - ''
  UseVpcConfig: !And 
    - !Not 
      - !Equals 
        - !Ref SecurityGroupIds
        - ''
    - !Not 
      - !Equals 
        - !Ref SubnetIds
        - ''
Resources:
  rdkRuleCodeLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Ref RuleLambdaName
      Code:
        ZipFile: |
          # Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
          #
          # Licensed under the Apache License, Version 2.0 (the "License"). You may
          # not use this file except in compliance with the License. A copy of the License is located at
          #
          #        http://aws.amazon.com/apache2.0/
          #
          # or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS,
          # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for
          # the specific language governing permissions and limitations under the License.

          import json
          import sys
          import datetime
          import boto3
          import botocore

          try:
              import liblogging
          except ImportError:
              pass

          ##############
          # Parameters #
          ##############

          # Define the default resource to report to Config Rules
          DEFAULT_RESOURCE_TYPE = 'AWS::EC2::SecurityGroup'

          # Set to True to get the lambda to assume the Role attached on the Config Service (useful for cross-account).
          ASSUME_ROLE_MODE = False

          # Other parameters (no change needed)
          CONFIG_ROLE_TIMEOUT_SECONDS = 900

          #############
          # Main Code #
          #############

          def evaluate_compliance(event, configuration_item, valid_rule_parameters):
              """Form the evaluation(s) to be return to Config Rules

              Return either:
              None -- when no result needs to be displayed
              a string -- either COMPLIANT, NON_COMPLIANT or NOT_APPLICABLE
              a dictionary -- the evaluation dictionary, usually built by build_evaluation_from_config_item()
              a list of dictionary -- a list of evaluation dictionary , usually built by build_evaluation()

              Keyword arguments:
              event -- the event variable given in the lambda handler
              configuration_item -- the configurationItem dictionary in the invokingEvent
              valid_rule_parameters -- the output of the evaluate_parameters() representing validated parameters of the Config Rule

              Advanced Notes:
              1 -- if a resource is deleted and generate a configuration change with ResourceDeleted status, the Boilerplate code will put a NOT_APPLICABLE on this resource automatically.
              2 -- if a None or a list of dictionary is returned, the old evaluation(s) which are not returned in the new evaluation list are returned as NOT_APPLICABLE by the Boilerplate code
              3 -- if None or an empty string, list or dict is returned, the Boilerplate code will put a "shadow" evaluation to feedback that the evaluation took place properly
              """

              ###############################
              # Add your custom logic here. #
              ###############################

              #Receive input port to be checked. In a given SG, if the given port is open from 0.0.0.0/0, then the SG is non-compliant. 
              print("rule parameters are:")
              print(valid_rule_parameters)

              ec2_client = get_client('ec2', event)

              # focus_ports_orig = [22,80]
              # print(focus_ports_orig)
              # print(type(focus_ports_orig))

              # for item in focus_ports_orig:
              #     print(item)
              #     print(type(item))


              focus_ports_orig = list(valid_rule_parameters['FocusOnPorts'].split(","))
              # focus_ports_list = valid_rule_parameters['FocusOnPorts']
              # print(type(valid_rule_parameters['FocusOnPorts']))
              # x = valid_rule_parameters['FocusOnPorts'].split(",")
              # print(type(x))

              focus_ports = [eval(i) for i in focus_ports_orig]
              print(focus_ports)
              print(type(focus_ports))
              for item in focus_ports:
                  print(item)
                  print(type(item))


              list_of_vulnerable_ports = []


              compliant = 'SG {} has no inbound rule for the given port open to the world'
              non_compliant = 'SG has atleast 1 inbound rule with given port open to the world'

              sg_full_details = json.loads(event['invokingEvent'])['configurationItem']['configuration']
              sg_id = sg_full_details['groupId']
              list_of_inbound_rules = sg_full_details['ipPermissions']

              print(sg_full_details)
              print("SG ID:\n")
              print(sg_id)
              print("List of inbound rules are below:\n")
              print(list_of_inbound_rules)

              for permission in list_of_inbound_rules:
                  # If there is no port(s) in the SG rule, move on to the next. this is the case when the inbound is from another
                  print("evaluating this permission:\n")
                  print(permission)
                  if not permission.get('fromPort'):
                      print("skipping permission as it does not have any FromPort")
                      continue

                  # We are not worried about accessible IP ranges for ports â€ 
                  # If the port is in the list, move on to the next
                  #if permission['FromPort'] not in focus_ports or permission['ToPort'] not in focus_ports:
                  if permission['fromPort'] in focus_ports:
                      print("FromPort is found to be equal to one of the focus_ports")
                      #for ip in permission['IpRanges']:
                      for item in permission['ipv4Ranges']:                
                          print(item)
                          # 0.0.0.0/0 indicates the port is accessible to the Internet
                          if item['cidrIp'] == '0.0.0.0/0':
                              # For the purposes of this PoC, we are not going to fully consider port ranges,
                              # but will only take the from and to port from that range. In a production environment,
                              # you'll likely want to pull out each port in that range to ensure it is accounted for.
                              # if permission['FromPort'] == permission['ToPort']:
                              print("Found to be vulnerable, appending it to the list:" + str(permission['fromPort']))
                              list_of_vulnerable_ports.append(permission['fromPort'])
                              
              
              print("List of vulnerable ports are:\n")
              print(list_of_vulnerable_ports)
              if list_of_vulnerable_ports:
                  return build_evaluation_from_config_item(
                      configuration_item,
                      'NON_COMPLIANT',
                      annotation=build_annotation(non_compliant.format(sg_id, list_of_vulnerable_ports))
                  )
              else:
                  return build_evaluation_from_config_item(
                      configuration_item,
                      'COMPLIANT',
                      annotation=build_annotation(compliant.format(sg_id))
                  )


          def evaluate_parameters(rule_parameters):
              """Evaluate the rule parameters dictionary validity. Raise a ValueError for invalid parameters.

              Return:
              anything suitable for the evaluate_compliance()

              Keyword arguments:
              rule_parameters -- the Key/Value dictionary of the Config Rules parameters
              """
              valid_rule_parameters = rule_parameters
              return valid_rule_parameters

          ####################
          # Helper Functions #
          ####################

          # Build an error to be displayed in the logs when the parameter is invalid.
          def build_parameters_value_error_response(ex):
              """Return an error dictionary when the evaluate_parameters() raises a ValueError.

              Keyword arguments:
              ex -- Exception text
              """
              return  build_error_response(internal_error_message="Parameter value is invalid",
                                          internal_error_details="An ValueError was raised during the validation of the Parameter value",
                                          customer_error_code="InvalidParameterValueException",
                                          customer_error_message=str(ex))

          # This gets the client after assuming the Config service role
          # either in the same AWS account or cross-account.
          def get_client(service, event, region=None):
              """Return the service boto client. It should be used instead of directly calling the client.

              Keyword arguments:
              service -- the service name used for calling the boto.client()
              event -- the event variable given in the lambda handler
              region -- the region where the client is called (default: None)
              """
              if not ASSUME_ROLE_MODE:
                  return boto3.client(service, region)
              credentials = get_assume_role_credentials(get_execution_role_arn(event), region)
              return boto3.client(service, aws_access_key_id=credentials['AccessKeyId'],
                                  aws_secret_access_key=credentials['SecretAccessKey'],
                                  aws_session_token=credentials['SessionToken'],
                                  region_name=region
                                )

          # This generate an evaluation for config
          def build_evaluation(resource_id, compliance_type, event, resource_type=DEFAULT_RESOURCE_TYPE, annotation=None):
              """Form an evaluation as a dictionary. Usually suited to report on scheduled rules.

              Keyword arguments:
              resource_id -- the unique id of the resource to report
              compliance_type -- either COMPLIANT, NON_COMPLIANT or NOT_APPLICABLE
              event -- the event variable given in the lambda handler
              resource_type -- the CloudFormation resource type (or AWS::::Account) to report on the rule (default DEFAULT_RESOURCE_TYPE)
              annotation -- an annotation to be added to the evaluation (default None). It will be truncated to 255 if longer.
              """
              eval_cc = {}
              if annotation:
                  eval_cc['Annotation'] = build_annotation(annotation)
              eval_cc['ComplianceResourceType'] = resource_type
              eval_cc['ComplianceResourceId'] = resource_id
              eval_cc['ComplianceType'] = compliance_type
              eval_cc['OrderingTimestamp'] = str(json.loads(event['invokingEvent'])['notificationCreationTime'])
              return eval_cc

          def build_evaluation_from_config_item(configuration_item, compliance_type, annotation=None):
              """Form an evaluation as a dictionary. Usually suited to report on configuration change rules.

              Keyword arguments:
              configuration_item -- the configurationItem dictionary in the invokingEvent
              compliance_type -- either COMPLIANT, NON_COMPLIANT or NOT_APPLICABLE
              annotation -- an annotation to be added to the evaluation (default None). It will be truncated to 255 if longer.
              """
              eval_ci = {}
              if annotation:
                  eval_ci['Annotation'] = build_annotation(annotation)
              eval_ci['ComplianceResourceType'] = configuration_item['resourceType']
              eval_ci['ComplianceResourceId'] = configuration_item['resourceId']
              eval_ci['ComplianceType'] = compliance_type
              eval_ci['OrderingTimestamp'] = configuration_item['configurationItemCaptureTime']
              return eval_ci

          ####################
          # Boilerplate Code #
          ####################

          # Get execution role for Lambda function
          def get_execution_role_arn(event):
              role_arn = None
              if 'ruleParameters' in event:
                  rule_params = json.loads(event['ruleParameters'])
                  role_name = rule_params.get("ExecutionRoleName")
                  if role_name:
                      execution_role_prefix = event["executionRoleArn"].split("/")[0]
                      role_arn = "{}/{}".format(execution_role_prefix, role_name)

              if not role_arn:
                  role_arn = event['executionRoleArn']

              return role_arn

          # Build annotation within Service constraints
          def build_annotation(annotation_string):
              if len(annotation_string) > 256:
                  return annotation_string[:244] + " [truncated]"
              return annotation_string

          # Helper function used to validate input
          def check_defined(reference, reference_name):
              if not reference:
                  raise Exception('Error: ', reference_name, 'is not defined')
              return reference

          # Check whether the message is OversizedConfigurationItemChangeNotification or not
          def is_oversized_changed_notification(message_type):
              check_defined(message_type, 'messageType')
              return message_type == 'OversizedConfigurationItemChangeNotification'

          # Check whether the message is a ScheduledNotification or not.
          def is_scheduled_notification(message_type):
              check_defined(message_type, 'messageType')
              return message_type == 'ScheduledNotification'

          # Get configurationItem using getResourceConfigHistory API
          # in case of OversizedConfigurationItemChangeNotification
          def get_configuration(resource_type, resource_id, configuration_capture_time):
              result = AWS_CONFIG_CLIENT.get_resource_config_history(
                  resourceType=resource_type,
                  resourceId=resource_id,
                  laterTime=configuration_capture_time,
                  limit=1)
              configuration_item = result['configurationItems'][0]
              return convert_api_configuration(configuration_item)

          # Convert from the API model to the original invocation model
          def convert_api_configuration(configuration_item):
              for k, v in configuration_item.items():
                  if isinstance(v, datetime.datetime):
                      configuration_item[k] = str(v)
              configuration_item['awsAccountId'] = configuration_item['accountId']
              configuration_item['ARN'] = configuration_item['arn']
              configuration_item['configurationStateMd5Hash'] = configuration_item['configurationItemMD5Hash']
              configuration_item['configurationItemVersion'] = configuration_item['version']
              configuration_item['configuration'] = json.loads(configuration_item['configuration'])
              if 'relationships' in configuration_item:
                  for i in range(len(configuration_item['relationships'])):
                      configuration_item['relationships'][i]['name'] = configuration_item['relationships'][i]['relationshipName']
              return configuration_item

          # Based on the type of message get the configuration item
          # either from configurationItem in the invoking event
          # or using the getResourceConfigHistiry API in getConfiguration function.
          def get_configuration_item(invoking_event):
              check_defined(invoking_event, 'invokingEvent')
              if is_oversized_changed_notification(invoking_event['messageType']):
                  configuration_item_summary = check_defined(invoking_event['configuration_item_summary'], 'configurationItemSummary')
                  return get_configuration(configuration_item_summary['resourceType'], configuration_item_summary['resourceId'], configuration_item_summary['configurationItemCaptureTime'])
              if is_scheduled_notification(invoking_event['messageType']):
                  return None
              return check_defined(invoking_event['configurationItem'], 'configurationItem')

          # Check whether the resource has been deleted. If it has, then the evaluation is unnecessary.
          def is_applicable(configuration_item, event):
              try:
                  check_defined(configuration_item, 'configurationItem')
                  check_defined(event, 'event')
              except:
                  return True
              status = configuration_item['configurationItemStatus']
              event_left_scope = event['eventLeftScope']
              if status == 'ResourceDeleted':
                  print("Resource Deleted, setting Compliance Status to NOT_APPLICABLE.")

              return status in ('OK', 'ResourceDiscovered') and not event_left_scope


          def get_assume_role_credentials(role_arn, region=None):
              sts_client = boto3.client('sts', region)
              try:
                  assume_role_response = sts_client.assume_role(RoleArn=role_arn,
                                                                RoleSessionName="configLambdaExecution",
                                                                DurationSeconds=CONFIG_ROLE_TIMEOUT_SECONDS)
                  if 'liblogging' in sys.modules:
                      liblogging.logSession(role_arn, assume_role_response)
                  return assume_role_response['Credentials']
              except botocore.exceptions.ClientError as ex:
                  # Scrub error message for any internal account info leaks
                  print(str(ex))
                  if 'AccessDenied' in ex.response['Error']['Code']:
                      ex.response['Error']['Message'] = "AWS Config does not have permission to assume the IAM role."
                  else:
                      ex.response['Error']['Message'] = "InternalError"
                      ex.response['Error']['Code'] = "InternalError"
                  raise ex

          # This removes older evaluation (usually useful for periodic rule not reporting on AWS::::Account).
          def clean_up_old_evaluations(latest_evaluations, event):

              cleaned_evaluations = []

              old_eval = AWS_CONFIG_CLIENT.get_compliance_details_by_config_rule(
                  ConfigRuleName=event['configRuleName'],
                  ComplianceTypes=['COMPLIANT', 'NON_COMPLIANT'],
                  Limit=100)

              old_eval_list = []

              while True:
                  for old_result in old_eval['EvaluationResults']:
                      old_eval_list.append(old_result)
                  if 'NextToken' in old_eval:
                      next_token = old_eval['NextToken']
                      old_eval = AWS_CONFIG_CLIENT.get_compliance_details_by_config_rule(
                          ConfigRuleName=event['configRuleName'],
                          ComplianceTypes=['COMPLIANT', 'NON_COMPLIANT'],
                          Limit=100,
                          NextToken=next_token)
                  else:
                      break

              for old_eval in old_eval_list:
                  old_resource_id = old_eval['EvaluationResultIdentifier']['EvaluationResultQualifier']['ResourceId']
                  newer_founded = False
                  for latest_eval in latest_evaluations:
                      if old_resource_id == latest_eval['ComplianceResourceId']:
                          newer_founded = True
                  if not newer_founded:
                      cleaned_evaluations.append(build_evaluation(old_resource_id, "NOT_APPLICABLE", event))

              return cleaned_evaluations + latest_evaluations

          def lambda_handler(event, context):
              if 'liblogging' in sys.modules:
                  liblogging.logEvent(event)

              global AWS_CONFIG_CLIENT

              #print(event)
              check_defined(event, 'event')
              invoking_event = json.loads(event['invokingEvent'])
              rule_parameters = {}
              if 'ruleParameters' in event:
                  rule_parameters = json.loads(event['ruleParameters'])

              try:
                  valid_rule_parameters = evaluate_parameters(rule_parameters)
              except ValueError as ex:
                  return build_parameters_value_error_response(ex)

              try:
                  AWS_CONFIG_CLIENT = get_client('config', event)
                  if invoking_event['messageType'] in ['ConfigurationItemChangeNotification', 'ScheduledNotification', 'OversizedConfigurationItemChangeNotification']:
                      configuration_item = get_configuration_item(invoking_event)
                      if is_applicable(configuration_item, event):
                          compliance_result = evaluate_compliance(event, configuration_item, valid_rule_parameters)
                      else:
                          compliance_result = "NOT_APPLICABLE"
                  else:
                      return build_internal_error_response('Unexpected message type', str(invoking_event))
              except botocore.exceptions.ClientError as ex:
                  if is_internal_error(ex):
                      return build_internal_error_response("Unexpected error while completing API request", str(ex))
                  return build_error_response("Customer error while making API request", str(ex), ex.response['Error']['Code'], ex.response['Error']['Message'])
              except ValueError as ex:
                  return build_internal_error_response(str(ex), str(ex))

              evaluations = []
              latest_evaluations = []

              if not compliance_result:
                  latest_evaluations.append(build_evaluation(event['accountId'], "NOT_APPLICABLE", event, resource_type='AWS::::Account'))
                  evaluations = clean_up_old_evaluations(latest_evaluations, event)
              elif isinstance(compliance_result, str):
                  if configuration_item:
                      evaluations.append(build_evaluation_from_config_item(configuration_item, compliance_result))
                  else:
                      evaluations.append(build_evaluation(event['accountId'], compliance_result, event, resource_type=DEFAULT_RESOURCE_TYPE))
              elif isinstance(compliance_result, list):
                  for evaluation in compliance_result:
                      missing_fields = False
                      for field in ('ComplianceResourceType', 'ComplianceResourceId', 'ComplianceType', 'OrderingTimestamp'):
                          if field not in evaluation:
                              print("Missing " + field + " from custom evaluation.")
                              missing_fields = True

                      if not missing_fields:
                          latest_evaluations.append(evaluation)
                  evaluations = clean_up_old_evaluations(latest_evaluations, event)
              elif isinstance(compliance_result, dict):
                  missing_fields = False
                  for field in ('ComplianceResourceType', 'ComplianceResourceId', 'ComplianceType', 'OrderingTimestamp'):
                      if field not in compliance_result:
                          print("Missing " + field + " from custom evaluation.")
                          missing_fields = True
                  if not missing_fields:
                      evaluations.append(compliance_result)
              else:
                  evaluations.append(build_evaluation_from_config_item(configuration_item, 'NOT_APPLICABLE'))

              # Put together the request that reports the evaluation status
              result_token = event['resultToken']
              test_mode = False
              if result_token == 'TESTMODE':
                  # Used solely for RDK test to skip actual put_evaluation API call
                  test_mode = True

              # Invoke the Config API to report the result of the evaluation
              evaluation_copy = []
              evaluation_copy = evaluations[:]
              while evaluation_copy:
                  AWS_CONFIG_CLIENT.put_evaluations(Evaluations=evaluation_copy[:100], ResultToken=result_token, TestMode=test_mode)
                  del evaluation_copy[:100]

              # Used solely for RDK test to be able to test Lambda function
              return evaluations

          def is_internal_error(exception):
              return ((not isinstance(exception, botocore.exceptions.ClientError)) or exception.response['Error']['Code'].startswith('5')
                      or 'InternalError' in exception.response['Error']['Code'] or 'ServiceError' in exception.response['Error']['Code'])

          def build_internal_error_response(internal_error_message, internal_error_details=None):
              return build_error_response(internal_error_message, internal_error_details, 'InternalError', 'InternalError')

          def build_error_response(internal_error_message, internal_error_details=None, customer_error_code=None, customer_error_message=None):
              error_response = {
                  'internalErrorMessage': internal_error_message,
                  'internalErrorDetails': internal_error_details,
                  'customerErrorMessage': customer_error_message,
                  'customerErrorCode': customer_error_code
              }
              print(error_response)
              return error_response


      ########Code should end here  
      Description: Create a new AWS lambda function for rule code
      Handler: "index.lambda_handler"
      MemorySize: '256'
      Role: !If 
        - CreateNewLambdaRole
        - !GetAtt 
          - rdkLambdaRole
          - Arn
        - !Ref LambdaRoleArn
      Runtime: !Ref SourceRuntime
      Timeout: !Ref Timeout
      Layers: !If 
        - UseAdditionalLayers
        - !Split 
          - ','
          - !Ref Layers
        - !Ref 'AWS::NoValue'
      VpcConfig: !If 
        - UseVpcConfig
        - SecurityGroupIds: !Split 
            - ','
            - !Ref SecurityGroupIds
          SubnetIds: !Split 
            - ','
            - !Ref SubnetIds
        - !Ref 'AWS::NoValue'
  ConfigPermissionToCallrdkRuleCodeLambda:
    Type: 'AWS::Lambda::Permission'
    DependsOn: rdkRuleCodeLambda
    Properties:
      FunctionName: !GetAtt 
        - rdkRuleCodeLambda
        - Arn
      Action: 'lambda:InvokeFunction'
      Principal: config.amazonaws.com
  rdkConfigRule:
    Type: 'AWS::Config::ConfigRule'
    DependsOn:
      - ConfigPermissionToCallrdkRuleCodeLambda
    Properties:
      ConfigRuleName: !Ref RuleName
      Description: !Ref Description
      Scope: !If 
        - EventTriggered
        - ComplianceResourceTypes: !Ref SourceEvents
        - !Ref 'AWS::NoValue'
      Source:
        Owner: CUSTOM_LAMBDA
        SourceIdentifier: !GetAtt 
          - rdkRuleCodeLambda
          - Arn
        SourceDetails:
          - !If 
            - EventTriggered
            - EventSource: aws.config
              MessageType: ConfigurationItemChangeNotification
            - !Ref 'AWS::NoValue'
          - !If 
            - EventTriggered
            - EventSource: aws.config
              MessageType: OversizedConfigurationItemChangeNotification
            - !Ref 'AWS::NoValue'
          - !If 
            - PeriodicTriggered
            - EventSource: aws.config
              MessageType: ScheduledNotification
              MaximumExecutionFrequency: !Ref SourcePeriodic
            - !Ref 'AWS::NoValue'
      InputParameters: !Ref SourceInputParameters
  rdkLambdaRole:
    Condition: CreateNewLambdaRole
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /rdk/
      PermissionsBoundary: !If 
        - UseBoundaryPolicyInRole
        - !Ref BoundaryPolicyArn
        - !Ref 'AWS::NoValue'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowLambdaAssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: ConfigRulePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: '2'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogStreams'
                Effect: Allow
                Resource: '*'
              - Sid: '3'
                Action:
                  - 'config:PutEvaluations'
                Effect: Allow
                Resource: '*'
              - Sid: '4'
                Action:
                  - 'iam:List*'
                  - 'iam:Get*'
                Effect: Allow
                Resource: '*'
              - Sid: '5'
                Action:
                  - 'sts:AssumeRole'
                Effect: Allow
                Resource: '*'
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/ReadOnlyAccess'
  SSMDocumentRole:    
    Type: 'AWS::IAM::Role'
    Properties:            
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowSSMToAssume
            Effect: Allow
            Principal:
              Service: ssm.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: AllowSGIngressRemediation
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: '1'
                Action:                  
                  - 'ec2:AuthorizeSecurityGroupEgress'
                  - 'ec2:AuthorizeSecurityGroupIngress'                  
                  - 'ec2:DescribeSecurityGroups'
                  - 'config:GetComplianceDetailsByResource'
                  - 'config:DescribeConfigRules'
                  - 'ec2:RevokeSecurityGroupIngress'
                Effect: Allow
                Resource: '*'              

  SSMDocument: 
    Type: AWS::SSM::Document
    Properties:
      Content:
        schemaVersion: '0.3'
        assumeRole: '{{AutomationAssumeRole}}'
        description: 'Removes inbound rules from provided security group if the ingress is open to 0.0.0.0/0 and on a certain port as specified in the respective config rule'
        parameters:
          AutomationAssumeRole:
            type: String
            description: (Optional) The ARN of the role that allows Automation to perform the actions on your behalf.
            #default: ''
          ResourceId:
            type: String
            description: "The security group ID on which to take action. This is received from the config rule"
            #default: 'echo Hello World'
          ConfigRuleName:
            type: String
            description: "This is the config rule which would invoke this document for its remediation action"
            #default: ''
        mainSteps:
          - name: remediatesg
            action: 'aws:executeScript'
            inputs:
              Runtime: python3.6              
              Handler: script_handler
              Script: |-
                import json
                import boto3

                ec2_client = boto3.client('ec2')
                config_client = boto3.client('config')

                def script_handler(events, context):
                    sg_id = events['resourceId']
                    print(sg_id)    
                    focus_ports_final_list = []

                    rule_description = config_client.describe_config_rules(ConfigRuleNames=[events['configRuleName']])
                    a = rule_description['ConfigRules'][0]['InputParameters']
                    b = a.split(":")[1]
                    c = b.split(",")  
                  
                    for item in c: 
                        item = item.strip('"}')
                        item = item.strip('\ "')       
                        focus_ports_final_list.append(item)
                    print(focus_ports_final_list)

                    sg_details = ec2_client.describe_security_groups(GroupIds=[sg_id])
                    print(sg_details)

                    for permission in sg_details['SecurityGroups'][0]['IpPermissions']:
                        # If there is no port(s) in the SG rule, move on to the next. this is the case when the inbound is from another
                        print("evaluating this permission:\n")
                        print(permission)
                        if not permission.get('FromPort'):
                            print("skipping permission as it does not have any FromPort")
                            continue
                        if str(permission['FromPort']) in focus_ports_final_list:
                            print("FromPort is found to be equal to one of the focus_ports_final_list:" + str(permission['FromPort']))
                            #for ip in permission['IpRanges']:
                            for item in permission['IpRanges']:                
                                print(item)               
                                if item['CidrIp'] == '0.0.0.0/0':                    
                                    print("This is the inbound which will have to be remediated:" + item['CidrIp'] + "\t" + str(permission['FromPort']))                  
                                    ec2_client.revoke_security_group_ingress(CidrIp=item['CidrIp'], FromPort=permission['FromPort'], GroupId=sg_id, IpProtocol=permission['IpProtocol'], ToPort=permission['ToPort'], DryRun=False)
                        else:
                            print("permission not matching anything in focus_ports")       
                   
              InputPayload:
                resourceId: '{{ResourceId}}'
                configRuleName: '{{ConfigRuleName}}'
      DocumentFormat: YAML
      DocumentType: Automation      

  rdkRemediationConfiguration:
    Type: "AWS::Config::RemediationConfiguration"
    Properties:
        ConfigRuleName: !Ref rdkConfigRule
        Automatic: !Ref RemediationMode
        Parameters:
          ResourceId:
            ResourceValue:
              Value: RESOURCE_ID
          AutomationAssumeRole:
            StaticValue:
              Values:
                - !GetAtt SSMDocumentRole.Arn
          ConfigRuleName:
            StaticValue:
              Values:
                - !Ref rdkConfigRule            
        TargetId: !Ref SSMDocument
        TargetType: "SSM_DOCUMENT"
        MaximumAutomaticAttempts: 1
        RetryAttemptSeconds: 60
        
Outputs:
  RuleCodeLambda:
    Description: ARN for the Rule Code lambda
    Value: !GetAtt 
      - rdkRuleCodeLambda
      - Arn
